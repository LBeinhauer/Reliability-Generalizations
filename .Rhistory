tryCatch({
estimate_Bonett_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
Bonett.alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
tryCatch({
estimate_Bonett_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
Bonett.omega_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
tryCatch({
estimate_Bonett_omega(data.list[[x]][which(rowSums(is.na(data.list[[x]])) <= 1),], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_estimates.list <- lapply(Alpha_estimates_paths, read.csv)
Alpha_rma.list <- lapply(Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Omega_estimates_paths <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)]
Omega_estimates.list <- lapply(Omega_estimates_paths, read.csv)
Omega_rma.list <- lapply(Omega_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list[-7], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Omega_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)]
Bonett.Omega_estimates.list <- lapply(Bonett.Omega_estimates_paths, read.csv)
Bonett.Omega_rma.list <- lapply(Bonett.Omega_estimates.list[-7], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
saveRDS(Alpha_rma.list, file = here("Data/Shiny Data/Alpha_rma.list.RData"))
saveRDS(Omega_rma.list, file = here("Data/Shiny Data/Omega_rma.list.RData"))
saveRDS(Bonett.Alpha_rma.list, file = here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
saveRDS(Bonett.Omega_rma.list, file = here("Data/Shiny Data/Bonett.Omega_rma.list.RData"))
# library loading and installing as necessary
# relevant R packages
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan", "gridExtra", "shiny", "grid")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Alpha_rma.list <- readRDS(here("Data/Shiny Data/Alpha_rma.list.RData"))[-7]
Bonett.Alpha_rma.list <- readRDS(here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates.list <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Omega_estimates.list <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Bonett.Alpha_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Bonett.Omega_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
data.list <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)[-7] %>%
sapply(., read.csv)
proj.names <- substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))
varT_rma.list <- readRDS(file = here("Notes/bootstrapped_varT_rma.RData"))[-7]
varE_rma.list <- readRDS(file = here("Notes/bootstrapped_varE_rma.RData"))[-7]
scales_meta <- read.csv(here("Notes/Tutzing_Vis_Scales.csv"))[-7,]
runApp()
test <- list(x1 = rnorm(100),)
test <- list(x1 = rnorm(100),
x2 = rnorm(200))
test$x1
Bonett.Alpha_estimates_paths
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_estimates_paths
Alpha_rma.list <- lapply(Alpha_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
Alpha_estimates_paths
Alpha_estimates_paths
substr(names(Alpha_estimates_paths),
(regexpr("Reliability Estimates/", names(Alpha_estimates_paths)) + 14),
(nchar(names(data.list))-10))
substr(names(Alpha_estimates_paths),
(regexpr("Reliability Estimates/", names(Alpha_estimates_paths)) + 14),
(nchar(names(Alpha_estimates_paths))-10))
substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 14),
(nchar(Alpha_estimates_paths)-10))
substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 21),
(nchar(Alpha_estimates_paths)-10))
substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 22),
(nchar(Alpha_estimates_paths)-10))
names(alpha_rma.list) <- substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 22),
(nchar(Alpha_estimates_paths)-10))
names(Alpha_rma.list) <- substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 22),
(nchar(Alpha_estimates_paths)-10))
Omega_estimates_paths <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)]
Omega_rma.list <- lapply(Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Omega_rma.list) <- substr(Omega_estimates_paths,
(regexpr("Reliability Estimates/", Omega_estimates_paths) + 22),
(nchar(Omega_estimates_paths)-10))
names(Omega_rma.list)
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
Bonett.Alpha_estimates_paths
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates_paths[-7], FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
substr(Bonett.Alpha_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Alpha_estimates_paths[-7]) + 22),
(nchar(Bonett.Alpha_estimates_paths[-7])-10))
substr(Bonett.Alpha_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Alpha_estimates_paths[-7]) + 22),
(nchar(Bonett.Alpha_estimates_paths[-7])-17))
names(Bonett.Alpha_rma.list) <- substr(Bonett.Alpha_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Alpha_estimates_paths[-7]) + 22),
(nchar(Bonett.Alpha_estimates_paths[-7])-17))
Bonett.Omega_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)]
Bonett.Omega_rma.list <- lapply(Bonett.Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
Bonett.Omega_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)]
Bonett.Omega_rma.list <- lapply(Bonett.Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Bonett.Omega_rma.list) <- substr(Bonett.Omega_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Omega_estimates_paths[-7]) + 22),
(nchar(Bonett.Omega_estimates_paths[-7])-17))
Bonett.Omega_rma.list
names(Bonett.Omega_rma.list) <- substr(Bonett.Omega_estimates_paths,
(regexpr("Reliability Estimates/", Bonett.Omega_estimates_paths) + 22),
(nchar(Bonett.Omega_estimates_paths)-17))
Bonett.Omega_rma.list
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_rma.list <- lapply(Alpha_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Alpha_rma.list) <- substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 22),
(nchar(Alpha_estimates_paths)-10))
Omega_estimates_paths <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)]
Omega_rma.list <- lapply(Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Omega_rma.list) <- substr(Omega_estimates_paths,
(regexpr("Reliability Estimates/", Omega_estimates_paths) + 22),
(nchar(Omega_estimates_paths)-10))
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates_paths[-7], FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Bonett.Alpha_rma.list) <- substr(Bonett.Alpha_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Alpha_estimates_paths[-7]) + 22),
(nchar(Bonett.Alpha_estimates_paths[-7])-17))
Bonett.Omega_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)]
Bonett.Omega_rma.list <- lapply(Bonett.Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Bonett.Omega_rma.list) <- substr(Bonett.Omega_estimates_paths,
(regexpr("Reliability Estimates/", Bonett.Omega_estimates_paths) + 22),
(nchar(Bonett.Omega_estimates_paths)-17))
saveRDS(Alpha_rma.list, file = here("Data/Shiny Data/Alpha_rma.list.RData"))
saveRDS(Omega_rma.list, file = here("Data/Shiny Data/Omega_rma.list.RData"))
saveRDS(Bonett.Alpha_rma.list, file = here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
saveRDS(Bonett.Omega_rma.list, file = here("Data/Shiny Data/Bonett.Omega_rma.list.RData"))
shiny::runApp()
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "psych", "coefficientalpha")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
path_data <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)
data.list <- sapply(path_data, read.csv)
alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
omega_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
tryCatch({
estimate_omega(data.list[[x]][which(rowSums(is.na(data.list[[x]])) <= 1),], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
Bonett.alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
tryCatch({
estimate_Bonett_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
Bonett.omega_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
tryCatch({
estimate_Bonett_omega(data.list[[x]][which(rowSums(is.na(data.list[[x]])) <= 1),], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
},
error = function(e)(cat("ERROR: ", conditionMessage(e), " - ",
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x],
" - ", x, "\n"))
)
})
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_rma.list <- lapply(Alpha_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Alpha_rma.list) <- substr(Alpha_estimates_paths,
(regexpr("Reliability Estimates/", Alpha_estimates_paths) + 22),
(nchar(Alpha_estimates_paths)-10))
Omega_estimates_paths <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)]
Omega_rma.list <- lapply(Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Omega_rma.list) <- substr(Omega_estimates_paths,
(regexpr("Reliability Estimates/", Omega_estimates_paths) + 22),
(nchar(Omega_estimates_paths)-10))
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates_paths[-7], FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Bonett.Alpha_rma.list) <- substr(Bonett.Alpha_estimates_paths[-7],
(regexpr("Reliability Estimates/", Bonett.Alpha_estimates_paths[-7]) + 22),
(nchar(Bonett.Alpha_estimates_paths[-7])-17))
Bonett.Omega_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)]
Bonett.Omega_rma.list <- lapply(Bonett.Omega_estimates_paths, FUN = function(x){
d <- read.csv(x)
metafor::rma(measure = "GEN", method = "REML", yi = d$Reliability, sei = d$StandardError)
})
names(Bonett.Omega_rma.list) <- substr(Bonett.Omega_estimates_paths,
(regexpr("Reliability Estimates/", Bonett.Omega_estimates_paths) + 22),
(nchar(Bonett.Omega_estimates_paths)-17))
saveRDS(Alpha_rma.list, file = here("Data/Shiny Data/Alpha_rma.list.RData"))
saveRDS(Omega_rma.list, file = here("Data/Shiny Data/Omega_rma.list.RData"))
saveRDS(Bonett.Alpha_rma.list, file = here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
saveRDS(Bonett.Omega_rma.list, file = here("Data/Shiny Data/Bonett.Omega_rma.list.RData"))
shiny::runApp()
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan", "gridExtra", "shiny", "grid")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Alpha_rma.list <- readRDS(here("Data/Shiny Data/Alpha_rma.list.RData"))[-7]
Bonett.Alpha_rma.list <- readRDS(here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates.list <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Omega_estimates.list <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Bonett.Alpha_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Bonett.Omega_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
data.list <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)[-7] %>%
sapply(., read.csv)
proj.names <- substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))
varT_rma.list <- readRDS(file = here("Notes/bootstrapped_varT_rma.RData"))[-7]
varE_rma.list <- readRDS(file = here("Notes/bootstrapped_varE_rma.RData"))[-7]
scales_meta <- read.csv(here("Notes/Tutzing_Vis_Scales.csv"))[-7,]
# library loading and installing as necessary
# relevant R packages
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan", "gridExtra", "shiny", "grid")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Alpha_rma.list <- readRDS(here("Data/Shiny Data/Alpha_rma.list.RData"))[-7]
Bonett.Alpha_rma.list <- readRDS(here("Data/Shiny Data/Bonett.Alpha_rma.list.RData"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates.list <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Omega_estimates.list <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)] %>%
lapply(., read.csv)
Bonett.Alpha_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
Bonett.Omega_estimates.list <- Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7] %>%
lapply(., read.csv)
data.list <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)[-7] %>%
sapply(., read.csv)
proj.names <- substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))
varT_rma.list <- readRDS(file = here("Notes/bootstrapped_varT_rma.RData"))[-7]
varE_rma.list <- readRDS(file = here("Notes/bootstrapped_varE_rma.RData"))[-7]
scales_meta <- read.csv(here("Notes/Tutzing_Vis_Scales.csv"))[-7,]
which(names(Alpha_estimates.list) %in% names(Alpha_estimates.list)[1])
names(Alpha_estimates.list)[1]
names(Alpha_estimates.list)
names(Alpha_estimates.list) <- substr(Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7],
(regexpr("Reliability Estimates/", Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7]) + 22),
(nchar(Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)][-7])-10))
Omega_estimates.list <- Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)] %>%
lapply(., read.csv)
names(Omega_estimates.list) <- substr(Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)],
(regexpr("Reliability Estimates/", Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)]) + 22),
(nchar(Reliability_estimates_paths[grep("_Omega.csv$", Reliability_estimates_paths)])-10))
names(Bonett.Alpha_estimates.list) <- substr(Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7],
(regexpr("Reliability Estimates/", Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7]) + 22),
(nchar(Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)][-7])-10))
names(Bonett.Alpha_estimates.list)
names(Bonett.Omega_estimates.list) <- substr(Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7],
(regexpr("Reliability Estimates/", Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7]) + 22),
(nchar(Reliability_estimates_paths[grep("_Bonett-Omega.csv$", Reliability_estimates_paths)][-7])-10))
runApp()
