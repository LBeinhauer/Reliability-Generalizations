
### RRR 6 - Facial Feedback (Strack, Martin, & Stepper, 1988)


### Function for RRR6 Data - written by?

# Again, RRR6 requires us to combine data from the different labs ourselves. However, large parts of the Replication author's code
#   could be used here. 

# a new function to install packages if neccesary
packages <- function(x) {
  
  x <- as.character(match.call()[[2]])
  
  if ( ! require(x, character.only = TRUE)) {
    
    install.packages(pkgs = x, repos = "http://cran.r-project.org")
    require(x, character.only = TRUE)    
  }
}

packages(BayesFactor)
packages(compute.es)
packages(metafor)
packages(MCMCpack)

# loading functions from one document the replication authors supplied
source(here("Data/Original Data/RRR6/Repfunctionspack.R"))

# Copying functions from another document of the replication authors right here, as it sources the above-file,
#  which does not work with the way we have set up this project
packages <- function(x) {
  
  x <- as.character(match.call()[[2]])
  
  if ( ! require(x, character.only = TRUE)) {
    
    install.packages(pkgs = x, repos = "http://cran.r-project.org")
    require(x, character.only = TRUE)    
  }
}

packages(BayesFactor)
packages(compute.es)
packages(metafor)
packages(MCMCpack)

##@@ function to convert column to numeric @@##

convert2num <- function(column) {
  
  if (is.character(column)) {
    
    column.new <- ifelse(column == "", NA, column)
    as.numeric(column.new)
    
  } else if (is.factor(column)) {
    
    as.numeric(as.character(column)) # should not be needed since "stringsAsFactors = FALSE"
    
  } else if (is.numeric(column)) {
    
    column
    
  }
}

facialFeedbackAnalysis <- function(filename, excludeParticipants) {
  #
  #  function that analyzes a .csv file with data of a facial feedback hypothesis replication experiment that is in the format of "TemplateDatafile.xlsx"
  #  and has been converted to .csv (with added second column: Participant ID)
  #
  #  input: filename = filename of the .csv data file
  #         excludeParticipants: logical -- indicates whether participants that do not meet the criteria for
  #                              inclusion are excluded
  #
  #  output: named list with the following elements:
  #
  #         ratingsSmile: participants' cartoon ratings in the smile condition
  #         ratingsPout: participants' cartoon ratings in the pout condition
  #         nSmile: number of participants in the smile condition
  #         nSmileExcluded: number of participants in the smile condition that were excluded
  #         nPout: number of participants in the pout condition
  #         nPoutExcluded: number of participants in the pout condition that were excluded
  #         meanSmile: mean cartoon rating in the smile condition
  #         meanPout: mean cartoon rating in the pout condition
  #         meanRating: overall mean rating of participants (i.e., based on participants in both conditions)
  #         sdSmile: standard deviation of the cartoon ratings in the smile condition
  #         sdPout: standard deviation of the cartoon ratings in the pout condition
  #         tValue: t-value of a one-sided independent samples t-test (equal variances assumed) which tests the hypothesis that the mean rating in the smile condition is larger
  #         pValue: p-value of the t-test
  #         df: degrees of freedom of the t-test
  #         BFplus0: independent samples t-test Bayes factor in favor of the hypothesis that the smile condition has a larger mean rating ( cauchy prior width = 1/sqrt(2) )
  #         BFr0: replication Bayes factor as proposed in Verhagen & Wagenmakers (2014)
  #         d: Cohen's d effect size
  #         dSE: standard error of d
  #         dLowerCI: lower bound of a 95% confidence interval for d
  #         dUpperCI: upper bound of a 95% confidence interval for d
  #         g: Hedges' g effect size
  #         gSE: standard error of g
  #         gLowerCI: lower bound of a 95% confidence interval for g
  #         gUpperCI: upper bound of a 95% confidence interval for g
  #         rawMeanDiff: difference between the mean of the smile and the pout condition
  #         rawMeanDiffSE: standard error of difference between the mean of smile and pout condition
  #         dataRaw: raw data without any manipulation
  #         dataAnalysis: data that were used for the analysis
  #         filename: name of the data file
  #
  
  ##@@ DATA LOADING @@##
  dataRawTmp <- read.csv(file = filename, header = TRUE, stringsAsFactors = FALSE)
  dataRaw <- dataRawTmp[-1, ] # remove second header row
  
  ##@@ DATA MANIPULATION @@##
  
  # rename columns
  colnames(dataRaw) <- c("subjectNo", "participantID", "condition", "performedCorrectlyCartoon1",
                         "performedCorrectlyCartoon2", "performedCorrectlyCartoon3",
                         "performedCorrectlyCartoon4", "performedCorrectlyTotal",
                         "ratingTask1", "ratingTask2", "ratingCartoon1",
                         "ratingCartoon2", "ratingCartoon3", "ratingCartoon4",
                         "selfReportedPerformance", "comprehensionCartoons",
                         "awareOfGoal", "participantsGuessedGoal", "age", "gender",
                         "student", "occupationFieldOfStudy")
  
  # make sure that the correct columns are numeric
  dataRaw$condition <- convert2num(dataRaw$condition)
  dataRaw$performedCorrectlyTotal <- convert2num(dataRaw$performedCorrectlyTotal)
  dataRaw$performedCorrectlyCartoon1 <- convert2num(dataRaw$performedCorrectlyCartoon1)
  dataRaw$performedCorrectlyCartoon2 <- convert2num(dataRaw$performedCorrectlyCartoon2)
  dataRaw$performedCorrectlyCartoon3 <- convert2num(dataRaw$performedCorrectlyCartoon3)
  dataRaw$performedCorrectlyCartoon4 <- convert2num(dataRaw$performedCorrectlyCartoon4)
  dataRaw$ratingCartoon1 <- convert2num(dataRaw$ratingCartoon1)
  dataRaw$ratingCartoon2 <- convert2num(dataRaw$ratingCartoon2)
  dataRaw$ratingCartoon3 <- convert2num(dataRaw$ratingCartoon3)
  dataRaw$ratingCartoon4 <- convert2num(dataRaw$ratingCartoon4)
  dataRaw$comprehensionCartoons <- convert2num(dataRaw$comprehensionCartoons)
  dataRaw$awareOfGoal <- convert2num(dataRaw$awareOfGoal)
  
  # remove rows without cartoon ratings
  cartoonRatingSubset1 <- dataRaw[ , c("ratingCartoon1", "ratingCartoon2", "ratingCartoon3", "ratingCartoon4")]
  noObsIndex <- apply(cartoonRatingSubset1, 1, function(row) all(is.na(row)) )
  dCleaned1 <-  dataRaw[ ! noObsIndex, ]
  
  nSmileBeforeExclusion <- sum(dCleaned1$condition == 1)
  nPoutBeforeExclusion <- sum(dCleaned1$condition == 0)
  
  if (excludeParticipants) {
    
    ##@@ CHECK EXCLUSION CRITERIA: 1 @@##
    
    # check whether participants performed 3 or 4 cartoon tasks correctly
    performedCorrectlyIndex <- ! is.na(dCleaned1$performedCorrectlyTotal) & dCleaned1$performedCorrectlyTotal >= 3    
    dCleaned2 <- dCleaned1[performedCorrectlyIndex, ]
    
    # check whether participants understood the cartoons
    comprehensionCartoonsIndex <- ! is.na(dCleaned2$comprehensionCartoons) &  dCleaned2$comprehensionCartoons == 1
    dCleaned3 <- dCleaned2[comprehensionCartoonsIndex, ]
    
    # check whether participants were aware of goal
    notAwareOfGoalIndex <- ! is.na(dCleaned3$awareOfGoal) & dCleaned3$awareOfGoal == 0
    dCleaned4 <- dCleaned3[notAwareOfGoalIndex, ]
    
    performedCorrectlyIndices <- dCleaned4[ , c("performedCorrectlyCartoon1", "performedCorrectlyCartoon2",
                                                "performedCorrectlyCartoon3", "performedCorrectlyCartoon4")]
    
  } else {
    
    dCleaned4 <- dCleaned1
    performedCorrectlyIndices <- matrix(1, nrow = nrow(dCleaned4), ncol = 4)
  }
  
  # calculate mean rating for each participant
  cartoonRatingSubset2 <- dCleaned4[ , c("ratingCartoon1", "ratingCartoon2", "ratingCartoon3", "ratingCartoon4")]
  
  meanCartoonRating <- numeric( nrow(cartoonRatingSubset2) )
  
  for (i in seq_len( nrow(cartoonRatingSubset2) ))
    meanCartoonRating[i] <- mean( as.numeric(cartoonRatingSubset2[i, which(performedCorrectlyIndices[i, ] == 1)]), na.rm = TRUE )
  
  dCleaned4$meanCartoonRating <- meanCartoonRating
  
  ratingsSmile <- dCleaned4[dCleaned4$condition == 1, "meanCartoonRating"]
  ratingsPout <- dCleaned4[dCleaned4$condition == 0, "meanCartoonRating"]
  
  if (excludeParticipants) {
    
    ##@@ CHECK EXCLUSION CRITERIA: 2 @@##
    
    # exclude participants that are more than 2.5 standard deviations away from condition mean
    
    outliersSmile <- (dCleaned4$condition == 1) & ((dCleaned4$meanCartoonRating > (mean(ratingsSmile) + 2.5 * sd(ratingsSmile)))
                                                   | (dCleaned4$meanCartoonRating < (mean(ratingsSmile) - 2.5 * sd(ratingsSmile))))
    
    outliersPout <- (dCleaned4$condition == 0) & ((dCleaned4$meanCartoonRating > (mean(ratingsPout) + 2.5 * sd(ratingsPout)))
                                                  | (dCleaned4$meanCartoonRating < (mean(ratingsPout) - 2.5 * sd(ratingsPout))))
    
    dCleaned4 <- dCleaned4[ ! outliersSmile & ! outliersPout, ]
    
    ratingsSmile <- dCleaned4[dCleaned4$condition == 1, "meanCartoonRating"]
    ratingsPout <- dCleaned4[dCleaned4$condition == 0, "meanCartoonRating"]
    
  }
  
  nSmile <- length(ratingsSmile)
  nSmileExcluded <- nSmileBeforeExclusion - nSmile
  meanSmile <- mean(ratingsSmile)
  sdSmile <- sd(ratingsSmile)
  
  nPout <- length(ratingsPout)
  nPoutExcluded <- nPoutBeforeExclusion - nPout
  meanPout <- mean(ratingsPout)
  sdPout <- sd(ratingsPout)
  
  # overall meanRating
  meanRating <- mean(c(ratingsSmile, ratingsPout))
  
  #@@ DATA ANALYSIS @@##
  
  # classical independent samples t-test (one-tailed, equal variances assumed)
  ttestClassical <- t.test(ratingsSmile, ratingsPout, alternative = "greater", var.equal = TRUE)
  tValue <- unname(ttestClassical$statistic)
  pValue <- ttestClassical$p.value
  df <- unname(ttestClassical$parameter)
  
  # Bayesian independent samples t-test (one-tailed)
  ttestBayesian <- ttestBF(ratingsSmile, ratingsPout, nullInterval = c(0, Inf))
  BFplus0 <- extractBF(ttestBayesian, onlybf=TRUE)[1]
  
  # Replication Bayes factor as proposed in Verhagen & Wagenmakers (2014)
  #
  # since the original article does not report relevant independent samples t-test nor
  # the number of participants, we assume equal number of participants in smile and pout
  # condition, and equal standard deviations in all three conditions of original experiment
  # (smile, neutral, pout)
  n.smile.original <- 32
  n.pout.original <- 32
  t.original <- 1.85
  t.replication <- tValue
  BFr0 <- ReplicationBayesfactorNCT(t.original, t.replication, n1 = n.smile.original, n2 = nSmile,
                                    m1 = n.pout.original, m2 = nPout, sample = 2)$BF
  BFr0 <- unname(BFr0) # remove "t" label
  
  ### calculate effect sizes and confidence intervals ###
  
  silent <- capture.output( effectSize <- compute.es::tes(t=tValue, n.1=nSmile, n.2=nPout) ) # capture.output allows to suppress printing to console
  
  # Cohen's d
  d <- effectSize$d
  dSE <- sqrt(effectSize$var.d)
  dLowerCI <- effectSize$l.d
  dUpperCI <- effectSize$u.d
  
  # Hedges' g
  g <- effectSize$g
  gSE <- sqrt(effectSize$var.g)
  gLowerCI <- effectSize$l.g
  gUpperCI <- effectSize$u.g
  
  # raw mean difference
  rawMeanDiff <- meanSmile - meanPout
  rawMeanDiffSE <- rawMeanDiff/tValue
  
  #@@ STORE DATA AND ANALYSIS @@##
  studyResult <- list(ratingsSmile=ratingsSmile, ratingsPout=ratingsPout, nSmile=nSmile, nSmileExcluded=nSmileExcluded, nPout=nPout, nPoutExcluded=nPoutExcluded,
                      meanSmile=meanSmile, meanPout=meanPout, meanRating=meanRating, sdSmile=sdSmile, sdPout=sdPout, tValue=tValue, pValue=pValue, df=df,
                      BFplus0=BFplus0, BFr0=BFr0, d=d, dSE=dSE, dLowerCI=dLowerCI, dUpperCI=dUpperCI, g=g, gSE=gSE, gLowerCI=gLowerCI, gUpperCI=gUpperCI,
                      rawMeanDiff=rawMeanDiff, rawMeanDiffSE=rawMeanDiffSE, dataRaw=dataRaw, dataAnalysis=dCleaned4, filename=filename)
  
  return(studyResult)
  
}

extractValues <- function(results, exclusionStatus, what) {
  #
  # function that extracts values from a results list where each list element corresponds to the output of facialFeedbackAnalysis(), i.e., each list element
  # corresponds to the analysis of one study
  #
  # input:  results: results list where each list element corresponds to the output of facialFeedbackAnalysis()
  #         exclusionStatus: either "withExclusion" or "withoutExclusion", indicates which analysis to use
  #         what: the name of the list element to extract, possible are
  #
  #           "ratingsSmile": participants' cartoon ratings in the smile condition
  #           "ratingsPout": participants' cartoon ratings in the pout condition
  #           "nSmile": number of participants in the smile condition
  #           "nSmileExcluded": number of participants in the smile condition that were excluded
  #           "nPout": number of participants in the pout condition
  #           "nPoutExcluded": number of participants in the pout condition that were excluded
  #           "meanSmile": mean cartoon rating in the smile condition
  #           "meanPout": mean cartoon rating in the pout condition
  #           "meanRating": overall mean rating of participants (i.e., based on participants in both conditions)
  #           "sdSmile": standard deviation of the cartoon ratings in the smile condition
  #           "sdPout": standard deviation of the cartoon ratings in the pout condition
  #           "tValue": t-value of a one-sided independent samples t-test (equal variances assumed) which tests the hypothesis that the smile condition has a larger mean rating
  #           "pValue": p-value of the t-test
  #           "df": degrees of freedom of the t-test
  #           "BFplus0": independent samples t-test Bayes factor in favor of the hypothesis that the smile condition has a larger mean rating ( cauchy prior width = 1/sqrt(2) )
  #           "BFr0": replication Bayes factor as proposed in Verhagen & Wagenmakers (2014)
  #           "d": Cohen's d effect size
  #           "dSE": standard error of d
  #           "dLowerCI": lower bound of a 95% confidence interval for d
  #           "dUpperCI": upper bound of a 95% confidence interval for d
  #           "g": Hedges' g effect size
  #           "gSE": standard error of g
  #           "gLowerCI": lower bound of a 95% confidence interval for g
  #           "gUpperCI": upper bound of a 95% confidence interval for g
  #           "rawMeanDiff": difference between the mean of smile and pout condition
  #           "rawMeanDiffSE": standard error of difference between the mean of smile and pout condition
  #
  # output: numeric vector with the requested value for each study
  #
  
  values <- numeric(length(results))
  
  for (i in seq_along(results)) {
    
    values[i] <- results[[i]][[exclusionStatus]][[what]]
    
  }
  
  return(values)
  
}


# identify files, including their paths in respective subdirectory
files <- list.files(here("Data/Original Data/RRR6"), full.names = TRUE)
files <- files[grep("*.csv", files)]

# identify individual author names from file-names
names <- list.files(here("Data/Original Data/RRR6"), full.names = FALSE)
names <- names[grep("*.csv", names)]

# The following lines use the author's self-defined functions to extract data from the individual lab-files
dat1 <- facialFeedbackAnalysis(files[1], excludeParticipants = T)
dat2 <- facialFeedbackAnalysis(files[2], excludeParticipants = T)
dat3 <- facialFeedbackAnalysis(files[3], excludeParticipants = T)
dat4 <- facialFeedbackAnalysis(files[4], excludeParticipants = T)
dat5 <- facialFeedbackAnalysis(files[5], excludeParticipants = T)
dat6 <- facialFeedbackAnalysis(files[6], excludeParticipants = T)
dat7 <- facialFeedbackAnalysis(files[7], excludeParticipants = T)
dat8 <- facialFeedbackAnalysis(files[8], excludeParticipants = T)
dat9 <- facialFeedbackAnalysis(files[9], excludeParticipants = T)
dat10 <- facialFeedbackAnalysis(files[10], excludeParticipants = T)
dat11 <- facialFeedbackAnalysis(files[11], excludeParticipants = T)
dat12 <- facialFeedbackAnalysis(files[12], excludeParticipants = T)
dat13 <- facialFeedbackAnalysis(files[13], excludeParticipants = T)
dat14 <- facialFeedbackAnalysis(files[14], excludeParticipants = T)
dat15 <- facialFeedbackAnalysis(files[15], excludeParticipants = T)
dat16 <- facialFeedbackAnalysis(files[16], excludeParticipants = T)
dat17 <- facialFeedbackAnalysis(files[17], excludeParticipants = T)

# list all files
data_listRRR6 <- list(dat1, dat2, dat3, dat4, dat5, dat6, dat7, dat8, dat9, dat10, dat11, dat12, dat13, dat14, dat15, dat16, dat17)

# calculate how many participants per study are included in the data
n.per.study <- unlist(lapply(data_listRRR6, FUN = function(x) nrow(x$dataRaw)))
total.n <- sum(n.per.study) # how many in total

# prepare a matrix, where relevant data will be stored
data.mat <- matrix(NA, nrow = total.n, ncol = 7)

# using a for-loop, data from the list's elements is extracted and stored in the prepared matrix
for(i in 1:length(files)){
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 1] <- data_listRRR6[[i]]$dataRaw$ratingCartoon1
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 2] <- data_listRRR6[[i]]$dataRaw$ratingCartoon2
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 3] <- data_listRRR6[[i]]$dataRaw$ratingCartoon3
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 4] <- data_listRRR6[[i]]$dataRaw$ratingCartoon4
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 5] <- data_listRRR6[[i]]$dataRaw$condition # factor
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 6] <- strsplit(names[i], "_")[[1]][1]   # source
  data.mat[((sum(n.per.study[1:i]) - (n.per.study[i]-1)):sum(n.per.study[1:i])), 7] <- i   # number of data file, for good measure
}

# transform to data.frame
data.df <- as.data.frame(data.mat, make.names = T)

# assign names to columns
names(data.df) <- c("ratingCartoon1", "ratingCartoon2", "ratingCartoon3", "ratingCartoon4", "factor", "leadingAuthor", "source")

table(data.df$leadingAuthor)

# again, assess number of participants - check with dataframe?
n.per.study2 <- unlist(lapply(data_listRRR6, FUN = function(x) nrow(x$dataAnalysis)))
total.n2 <- sum(n.per.study2)


# repeat above procedure

###################################################
### why is $dataAnalysis superior to $dataRaw?? ###
###################################################


data.mat2 <- matrix(NA, nrow = total.n2, ncol = 8)

for(i in 1:length(files)){
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 1] <- data_listRRR6[[i]]$dataAnalysis$ratingCartoon1
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 2] <- data_listRRR6[[i]]$dataAnalysis$ratingCartoon2
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 3] <- data_listRRR6[[i]]$dataAnalysis$ratingCartoon3
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 4] <- data_listRRR6[[i]]$dataAnalysis$ratingCartoon4
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 5] <- data_listRRR6[[i]]$dataAnalysis$condition
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 6] <- strsplit(names[i], "_")[[1]][1]
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 7] <- i
  data.mat2[((sum(n.per.study2[1:i]) - (n.per.study2[i]-1)):sum(n.per.study2[1:i])), 8] <- data_listRRR6[[i]]$dataAnalysis$meanCartoonRating
}


names(data.mat2) <- c("ratingCartoon1", "ratingCartoon2", "ratingCartoon3", "ratingCartoon4", "factor", "leadingAuthor", "source", "DV")

data.df2 <- as.data.frame(data.mat2, make.names = T)

names(data.df2) <- c("ratingCartoon1", "ratingCartoon2", "ratingCartoon3", "ratingCartoon4", "factor", "leadingAuthor", "source", "DV")

table(data.df2$leadingAuthor)


sm_df <- data.df2

sm_df <- data.frame(sapply(sm_df[,grep("rating", names(sm_df))], as.numeric),
                    source = sm_df$leadingAuthor,
                    group = sm_df$factor)

write.csv(sm_df, here("Data/Extracted (Project) Data/Strack_Facial_Feedback.csv"), row.names = FALSE)

rm(list = ls())