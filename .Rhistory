d <- data[which(data$source == unique(data$source)[x]), -s.idx]
fit <- tryCatch(coefficientalpha::omega(d, se = TRUE, test = FALSE, silent = TRUE),
error = function(e) unique(data$source)[x] )
return(c(fit$omega, fit$se))
})
df <- data.frame(Reliability = t(est)[,1],
StandardError = t(est)[,2],
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Omega.csv")))
}
return(df)
}
omega_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_omega(data.list[[x]], csv = TRUE, project.title =
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
estimate_Bonett_alpha <- function(data, csv = FALSE, project.title = NULL){
k <- length(unique(data$source))
s.idx <- grep("source", names(data))
j <- k-1
n <- nrow(data)
est <- apply(as.matrix(1:k), MARGIN = 1, FUN = function(x){
d <- data[which(data$source == unique(data$source)[x]), -s.idx]
suppressWarnings(psych::alpha(d))
})
Alpha <- sapply(est, FUN = function(x){x$total$raw_alpha})
B.Alpha <- log(1 - abs(Alpha))
SE_B.Alpha <- sqrt((2 * j)/((j - 1) * (n - 2)))
df <- data.frame(Reliability = B.Alpha,
StandardError = SE_B.Alpha,
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Bonett-Alpha.csv")))
}
return(df)
}
Bonett.alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_Bonett_alpha(data.list[[x]], csv = TRUE, project.title =
substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
source(here("RG_function-library.R"))
Alpha_estimates_paths <- list.files(here("Data/Reliability Estimates", full.names =  TRUE))
Alpha_estimates_paths
here("Data/Reliability Estimates")
Alpha_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv^", Reliability_estimates_paths)]
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_estimates_paths
Alpha_estimates.list <- lapply(Alpha_estimates_paths, read.csv)
estimate_alpha <- function(data, csv = FALSE, project.title = NULL){
k <- length(unique(data$source))
s.idx <- grep("source", names(data))
est <- apply(as.matrix(1:k), MARGIN = 1, FUN = function(x){
d <- data[which(data$source == unique(data$source)[x]), -s.idx]
suppressWarnings(psych::alpha(d))
})
df <- data.frame(Reliability = sapply(est, FUN = function(x){x$total$raw_alpha}),
StandardError = sapply(est, FUN = function(x){x$total$ase}),
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Alpha.csv")), row.names = FALSE)
}
return(df)
}
estimate_omega <- function(data, csv = FALSE, project.title = NULL){
k <- length(unique(data$source))
s.idx <- grep("source", names(data))
est <- sapply(1:k, FUN = function(x){
d <- data[which(data$source == unique(data$source)[x]), -s.idx]
fit <- coefficientalpha::omega(d, se = TRUE, test = FALSE, silent = TRUE)
return(c(fit$omega, fit$se))
})
df <- data.frame(Reliability = t(est)[,1],
StandardError = t(est)[,2],
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Omega.csv")), row.names = FALSE)
}
return(df)
}
estimate_Bonett_alpha <- function(data, csv = FALSE, project.title = NULL){
k <- length(unique(data$source))
s.idx <- grep("source", names(data))
j <- k-1
n <- nrow(data)
est <- apply(as.matrix(1:k), MARGIN = 1, FUN = function(x){
d <- data[which(data$source == unique(data$source)[x]), -s.idx]
suppressWarnings(psych::alpha(d))
})
Alpha <- sapply(est, FUN = function(x){x$total$raw_alpha})
B.Alpha <- log(1 - abs(Alpha))
SE_B.Alpha <- sqrt((2 * j)/((j - 1) * (n - 2)))
df <- data.frame(Reliability = B.Alpha,
StandardError = SE_B.Alpha,
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Bonett-Alpha.csv")), row.names = FALSE)
}
return(df)
}
path_data <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)
data.list <- sapply(path_data, read.csv)
alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
Bonett.alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_Bonett_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
Alpha_estimates.list <- lapply(Alpha_estimates_paths, read.csv)
Alpha_rma.list <- lapply(Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
pdf(file = "C:/Users/beinhaul/Downloads/forest_test.pdf")
lapply(Alpha_rma.list, forest)
dev.off()
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates_paths
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates.list
data <- data.list[[1]]
n <- data %>%
group_by(source) %>%
summarise(n = n())
n
n <- data %>%
group_by(source) %>%
summarise(n = n())$n
n <- data %>%
group_by(source) %>%
summarise(n = n()) %>%
n
data %>%
group_by(source) %>%
summarise(n = n()) %>%
$n
n <- n$n
n
estimate_Bonett_alpha <- function(data, csv = FALSE, project.title = NULL){
k <- length(unique(data$source))
s.idx <- grep("source", names(data))
j <- k-1
n <- data %>%
group_by(source) %>%
summarise(n = n())
n <- n$n
est <- apply(as.matrix(1:k), MARGIN = 1, FUN = function(x){
d <- data[which(data$source == unique(data$source)[x]), -s.idx]
suppressWarnings(psych::alpha(d))
})
Alpha <- sapply(est, FUN = function(x){x$total$raw_alpha})
B.Alpha <- log(1 - abs(Alpha))
SE_B.Alpha <- sqrt((2 * j)/((j - 1) * (n - 2)))
df <- data.frame(Reliability = B.Alpha,
StandardError = SE_B.Alpha,
source = unique(data$source))
if(csv){
write.csv(df, file = here(paste0("Data/Reliability Estimates/", project.title, "_Bonett-Alpha.csv")), row.names = FALSE)
}
return(df)
}
Bonett.alpha_estimates.list <- lapply(seq_along(data.list), FUN = function(x){
estimate_Bonett_alpha(data.list[[x]], csv = TRUE,
project.title = substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x])
})
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates.list
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates.list
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "ML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "DL", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "DL", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "HS", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
View(control)
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[1]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[2]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[3]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[4]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[5]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[6]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[7]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[8]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[9]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[10]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[11]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[12]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[13]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[14]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[15]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[16]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[17]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[18]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[19]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[20]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[21]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[22]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[23]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[24]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[25]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[26]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[27]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[28]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[29]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[30]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[31]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[32]])
source('~/.active-rstudio-document', echo=TRUE)
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[33]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[34]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[35]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[36]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[37]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[38]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[39]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[340]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[40]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[41]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[42]])
metafor::rma(measure = "GEN", method = "REML", yi = Reliability, sei = StandardError,
data = Bonett.Alpha_estimates.list[[7]])
path_data <- list.files(here("Data/Extracted (Project) Data"), full.names = TRUE)
data.list <- sapply(path_data, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list[[-7]], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list[-7], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_rma.list
pdf(file = "C:/Users/beinhaul/Downloads/Bonett_forest_test.pdf")
lapply(Bonett.Alpha_rma.list, forest)
dev.off()
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_estimates.list <- lapply(Alpha_estimates_paths, read.csv)
Alpha_rma.list <- lapply(Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list[-7], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
library(gridExtra)
my_forest_plot <- function(rma.fit, rma.data, main.title = "Forest Plot",
x.lab = "Estimate", ci.lvl = .975, CI.display = FALSE){
# Calculate lower and upper limits of confidence levels, for each replication's estimate
cil <- rma.fit$yi[1:length(rma.fit$yi)] - qnorm(ci.lvl)*sqrt(rma.fit$vi[1:length(rma.fit$vi)])
ciu <- rma.fit$yi[1:length(rma.fit$yi)] + qnorm(ci.lvl)*sqrt(rma.fit$vi[1:length(rma.fit$vi)])
p <- ggplot() + # initialize ggplot
# plot point estimates
geom_point(aes(x = rma.fit$yi, y = c(5:(length(rma.fit$yi)+4))), shape = 15) +
# vertical line at x = 0
# geom_vline(xintercept = 0, linetype = "dashed") +
# add horizontal line for CI of each replication's estimate
geom_segment(aes(x = cil, y = c(5:(length(rma.fit$yi)+4)), xend = ciu, yend = c(5:(length(rma.fit$yi)+4)))) +
# ggplot theme
theme_minimal() +
# plot meta analytic point estimate
geom_point(aes(x = rma.fit$b[1], y = 1), shape = 18) +
#add CI-line for meta-analytic point estimate
geom_segment(aes(x = rma.fit$b[1] - qnorm(ci.lvl)*rma.fit$se, y = 1,
xend = rma.fit$b[1] + qnorm(ci.lvl)*rma.fit$se, yend = 1)) +
# add vertical upper & lower-limit "fence"-lines, for each replication's estimate
geom_segment(aes(x = cil, xend = cil, y = (c(5:(length(rma.fit$yi)+4))+.3), yend = (c(5:(length(rma.fit$yi)+4))-.3) )) +
geom_segment(aes(x = ciu, xend = ciu, y = (c(5:(length(rma.fit$yi)+4))+.3), yend = (c(5:(length(rma.fit$yi)+4))-.3) )) +
# add vertical upper- & lower-limit "fence lines, for meta-analytic point estimate
geom_segment(aes(x = rma.fit$b[1] - qnorm(ci.lvl)*rma.fit$se, y = (1+.3),
xend = rma.fit$b[1] - qnorm(ci.lvl)*rma.fit$se, yend = (1-.3))) +
geom_segment(aes(x = rma.fit$b[1] + qnorm(ci.lvl)*rma.fit$se, y = (1+.3),
xend = rma.fit$b[1] + qnorm(ci.lvl)*rma.fit$se, yend = (1-.3))) +
# labs & titles
xlab(x.lab) +
ylab("Lab") +
ggtitle(main.title)
if(CI.display){
p <- p +
scale_y_continuous(breaks = c(1, (5:(length(rma.fit$yi)+4))),
labels = c("RE Model", unique(as.character(rma.data$source))),
sec.axis = dup_axis(breaks = c(1, (5:(length(rma.fit$yi)+4))),
labels = c(paste0("[", round(rma.fit$b[1] - qnorm(ci.lvl)*rma.fit$se, 2), ";", round(rma.fit$b[1] + qnorm(ci.lvl)*rma.fit$se, 2), "]"),
paste0("[", round(cil, 2), ";", round(ciu, 2), "]")),
name = ""))
# p <- p + geom_text(aes(y = c(5:(length(rma.fit$yi)+4)), x = (max(ciu) + abs(max(ciu))*.05),
#               label = paste0("[", round(cil, 2), ";", round(ciu, 2), "]")))
}else{
p <- p +     # adjust labels on y-axis, to display lab-abreviations
scale_y_continuous(breaks = c(1, (5:(length(rma.fit$yi)+4))), labels = c("RE Model", unique(as.character(rma.data$source))))
}
p
}
my_forest_plot(Alpha_estimates.list[1], Alpha_rma.list[1])
Alpha_estimates.list[1]
Alpha_estimates.list[[1]]
my_forest_plot(Alpha_estimates.list[[1]], Alpha_rma.list[[1]])
Alpha_rma.list[[1]]$vi
my_forest_plot(rma.data = Alpha_estimates.list[[1]], rma.fit = Alpha_rma.list[[1]])
pdf(here("Graphics/ForestPlots_Alpha_test.pdf"))
lapply(seq_along(Alpha_estimates.list), FUN = function(x){
p <- my_forest_plot(rma.data = Alpha_estimates.list[[x]], rma.fit = Alpha_rma.list[[x]],
main.title = paste0("Forest Plot - ", substr(names(data.list),
(regexpr("Project) Data/", names(data.list)) + 14),
(nchar(names(data.list))-4))[x]),
x.lab = "Cronbach's Alpha", ci.lvl = .975, CI.display = TRUE)
})
dev.off()
data.list
### Reliability Generalization  ###
## 02/06/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and extraction to single     #
#  files per scale                                                                                #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
packages <- c("tidyverse", "here", "metafor")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("RG_function-library.R"))
Reliability_estimates_paths <- list.files(here("Data/Reliability Estimates"), full.names =  TRUE)
Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Alpha.csv$", Reliability_estimates_paths)]
Alpha_estimates.list <- lapply(Alpha_estimates_paths, read.csv)
Alpha_rma.list <- lapply(Alpha_estimates.list, FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
Bonett.Alpha_estimates_paths <- Reliability_estimates_paths[grep("_Bonett-Alpha.csv$", Reliability_estimates_paths)]
Bonett.Alpha_estimates.list <- lapply(Bonett.Alpha_estimates_paths, read.csv)
Bonett.Alpha_rma.list <- lapply(Bonett.Alpha_estimates.list[-7], FUN = function(x){
metafor::rma(measure = "GEN", method = "REML", yi = x$Reliability, sei = x$StandardError)
})
test
Alpha_estimates.list
